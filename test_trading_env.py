# test_trading_env.py

import os
from trading_env import TradingEnv, load_real_data

def test_trading_environment():
    """Testa o ambiente de trading executando alguns passos de simula√ß√£o."""
    
    print("Carregando dados reais...")
    real_data = load_real_data(os.path.join('data', 'ETH_USDT_1m.parquet'))
    
    if real_data is None:
        print("‚ùå Erro: N√£o foi poss√≠vel carregar os dados reais.")
        return False
    
    print(f"‚úÖ Dados carregados: {len(real_data):,} registros")
    
    print("\nCriando ambiente de trading...")
    env = TradingEnv(real_prices_data=real_data)
    print("‚úÖ Ambiente criado com sucesso")
    
    print(f"\nConfigura√ß√£o do ambiente:")
    print(f"  - Espa√ßo de a√ß√£o: {env.action_space}")
    print(f"  - Espa√ßo de observa√ß√£o: {env.observation_space}")
    print(f"  - Tamanho da janela: {env.window_size}")
    
    print("\nExecutando teste de simula√ß√£o...")
    
    # Reset do ambiente
    observation, info = env.reset()
    print(f"‚úÖ Reset executado. Patrim√¥nio inicial: ${info['net_worth']:.2f}")
    
    # Executar alguns passos
    total_reward = 0
    for step in range(10):
        # A√ß√£o aleat√≥ria (0=Manter, 1=Comprar, 2=Vender)
        action = env.action_space.sample()
        
        # Executar passo
        observation, reward, terminated, truncated, info = env.step(action)
        total_reward += reward
        
        # Renderizar estado
        env.render()
        
        if terminated:
            print(f"‚ö†Ô∏è  Epis√≥dio terminou no passo {step + 1}")
            break
    
    print(f"\nüìä Resumo do teste:")
    print(f"  - Passos executados: {step + 1}")
    print(f"  - Patrim√¥nio final: ${info['net_worth']:.2f}")
    print(f"  - Recompensa total: ${total_reward:.2f}")
    print(f"  - Lucro/Preju√≠zo: ${info['net_worth'] - 10000:.2f}")
    
    print("\nüéâ Teste do ambiente de trading conclu√≠do com sucesso!")
    return True

if __name__ == "__main__":
    test_trading_environment() 